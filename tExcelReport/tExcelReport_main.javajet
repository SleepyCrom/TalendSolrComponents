<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.process.ElementParameterParser
		java.util.*
	"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();



List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
    if (metadata!=null) {
        String cid = node.getUniqueName();
	%>
	nb_line_<%=cid %>++;
	<%
	
    	List< ? extends IConnection> conns = node.getIncomingConnections();
    	for (IConnection conn : conns) {
    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
    			List<IMetadataColumn> columns = metadata.getListColumns();
    			int sizeColumns = columns.size();

		for (int i = 0; i < sizeColumns; i++) {
			int rowSetNo = i+1;

			IMetadataColumn column = columns.get(i);
			JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
			boolean isPrimitive = JavaTypesManager.isJavaPrimitiveType( javaType, column.isNullable());

			    if(isPrimitive) {		    
				if(javaType == JavaTypesManager.BYTE) {
					%>
					java.lang.Byte <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.byteValue();
					<%
				}
				else if(javaType == JavaTypesManager.SHORT) {
					%>
					java.lang.Short <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.shortValue();
					<%
				}				
				else if(javaType == JavaTypesManager.INTEGER) {
					%>
					java.lang.Integer <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}
				else if(javaType == JavaTypesManager.LONG) {
					%>
					java.lang.Long <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.longValue();
					<%
				}
				else if(javaType == JavaTypesManager.FLOAT) {
					%>
					java.lang.Float <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.floatValue();
					<%
				}
				else if(javaType == JavaTypesManager.DOUBLE) {
					%>
					java.lang.Double <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.doubleValue();
					<%
				}
			    	if(javaType == JavaTypesManager.BOOLEAN) {
					%>
					java.util.Boolean <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.booleanValue();
					<%
				}
				else if(javaType == JavaTypesManager.CHARACTER) {
					%>
					java.lang.Character <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.charValue();
					<%
				}				
			    }else {
			    	if(javaType == JavaTypesManager.BOOLEAN) {
					%>
					java.util.Boolean <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.booleanValue();
					<%
				}
				else if(javaType == JavaTypesManager.BIGDECIMAL) {
					%>
					java.math.BigDecimal <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}				
				else if(javaType == JavaTypesManager.BYTE) {
					%>
					java.lang.Byte <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.byteValue();
					<%
				}
				else if(javaType == JavaTypesManager.BYTE_ARRAY) {
					%>
					java.lang.Byte[] <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}				
				else if(javaType == JavaTypesManager.CHARACTER) {
					%>
					java.lang.Character <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.charValue();
					<%
				}
				else if(javaType == JavaTypesManager.DATE) {
					%>
					java.util.Date <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}
				else if(javaType == JavaTypesManager.DOUBLE) {
					%>
					java.lang.Double <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.doubleValue();
					<%
				}
				else if(javaType == JavaTypesManager.INTEGER) {
					%>
					java.lang.Integer <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.intValue();
					<%
				}
				else if(javaType == JavaTypesManager.LONG) {
					%>
					java.lang.Long <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.longValue();
					<%
				}
				else if(javaType == JavaTypesManager.FLOAT) {
					%>
					java.lang.Float <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.floatValue();
					<%
				}
				else if(javaType == JavaTypesManager.SHORT) {
					%>
					java.lang.Short <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>.shortValue();
					<%
				}
				else if(javaType == JavaTypesManager.STRING) {
					%>
					String <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}				
				else {
					%>
					String <%=column.getLabel()%> =  <%=conn.getName() %>.<%=column.getLabel()%>;
					<%
				}
			    }


		}

		List<Map<String, String>> objects =  (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OBJECTNAMESTABLE__");
		List<Map<String, String>> groups = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__GROUPBYS__");
		List<Map<String, String>> objectNesting =  (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OBJECTNESTING__");
		HashMap<String, ArrayList> parentChildMap = new HashMap<String, ArrayList>();
		HashMap<String, ArrayList> childParentMap = new HashMap<String, ArrayList>();
		ArrayList<String> allParentObjects = new ArrayList<String>();
		ArrayList<String> allChildObjects = new ArrayList<String>();
		HashMap<Integer, String> idToNameMap = new HashMap<Integer, String>();

		HashMap<String, ArrayList> objectRelationships = new HashMap<String, ArrayList>();
		for (int k=0; k < objectNesting.size() ; k++) {
			Map<String, String> fields =objectNesting.get(k);
			int parentObjectID = Integer.parseInt(fields.get("PARENT_OBJECT"));
			String parentField = fields.get("PARENT_FIELD");
			int childObjectID = Integer.parseInt(fields.get("CHILD_OBJECT"));
			String childField = fields.get("CHILD_FIELD");
			String childObjectName = "";
			String parentObjectName = "";
			for (int m=0 ; m<objects.size() ; m++) {
				Map<String, String> currentObject = objects.get(m);
				int currentObjectID = Integer.parseInt(currentObject.get("OBJECT_ID"));
				String currentObjectName = currentObject.get("OBJECTNAME");
				Integer id = (Integer) currentObjectID;
				idToNameMap.put(id, currentObjectName);
				String keyID = parentObjectID + "~|" + childObjectID;
				String fieldNames = parentField + "~|" + childField;
				
				if (currentObjectID == parentObjectID) {
					parentObjectName = currentObjectName;
					allParentObjects.add(parentObjectName);
				}
				else if(currentObjectID == childObjectID) {
					childObjectName = currentObjectName;
					allChildObjects.add(childObjectName);
				}
				
				if (! objectRelationships.containsKey(keyID)) {
					ArrayList ar = new ArrayList();
					ar.add(fieldNames);
					objectRelationships.put(keyID, ar);
				} else {
					ArrayList fieldData = objectRelationships.get(keyID);
					if (fieldData.indexOf(fieldNames) == -1) {
						//in theory should never get here - but this will prevent duplicates
						fieldData.add(fieldNames);
					}
				}
			}

			ArrayList<String> childObjects = null;
			
			//An object could have multiple children of different object types
			//The blow block caters for this
			
			if (! parentChildMap.containsKey(parentObjectName)) {
				childObjects = new ArrayList<String>();
				childObjects.add(childObjectName);
				parentChildMap.put(parentObjectName, childObjects);
			} else {
				childObjects = parentChildMap.get(parentObjectName);
				//Have we come across this child before ?
				if (childObjects.indexOf(childObjectName) == -1) {
					childObjects.add(childObjectName);
				}
			}			

		}
		
		//OK now add the join fields to the main template
		for (Map.Entry entry : objectRelationships.entrySet()) {
			String joinObjectsStr = (String) entry.getKey();
			ArrayList joinFields = (ArrayList) entry.getValue();
			//ok what does this map contain ?
			String parentKey="";
			String childKey="";
			String child = "";
			String parent = "";
			Iterator<String> fieldsItr = joinFields.iterator();
			while (fieldsItr.hasNext()) {
				String fieldsDelim = fieldsItr.next();
				String[] fields =  fieldsDelim.split("~\\|");	
				String[] joinObjects = joinObjectsStr.split("~\\|");
				Integer parentId = Integer.parseInt(joinObjects[0]);
				Integer childId = Integer.parseInt(joinObjects[1]);
				parent = idToNameMap.get(parentId);
				child = idToNameMap.get(childId);
				//String joinStr="";
				for (int i=0 ; i<fields.length ; i+=2) {
					parentKey += fields[i] + ".toString() +";
					childKey += fields[i+1] + ".toString() +";
					//joinStr += s + ".toString() +";
				}
				

			}
			
			//remove any trailing concatenation symbols
			if (parentKey.endsWith("+")) {
				parentKey = parentKey.substring(0, parentKey.length()-1);
			}
			if (childKey.endsWith("+")) {
				childKey = childKey.substring(0, childKey.length()-1);
			}
			
			%>
				String <%=parent%><%=child%>JoinKey = <%=parentKey%>;
				String <%=child%><%=parent%>JoinKey = <%=childKey%>;
			<%
		}
		
		ArrayList<String> objectOrder = new ArrayList<String>();
		
		if (parentChildMap.size() == 0) {
			//we don't have any nesting so object order doesn't matter 
			//just put everything into the array so the code below can 
			//remain the same
			for (int i=0 ; i<objects.size() ; i++) {
				Map<String, String> currentObject = objects.get(i);
				int currentObjectID = Integer.parseInt(currentObject.get("OBJECT_ID"));
				String currentObjectName = currentObject.get("OBJECTNAME");
				objectOrder.add(currentObjectName);
			}
		}
		
		
		// This should contain a list of the object in the correct order
		for (Map.Entry entry : parentChildMap.entrySet()) {
			String parentName = (String) entry.getKey();
			ArrayList<String> children = (ArrayList<String>) entry.getValue();
			int indexParent = objectOrder.indexOf(parentName);
			for (String childName : children) {
				if (indexParent == -1) {
					objectOrder.add(parentName);
					if (! objectOrder.contains(childName)) {
						objectOrder.add(indexParent +1 , childName);
					}
					
				}
			}
		}
		

		Collections.reverse(objectOrder);
		
		
		
		for (String objectName : objectOrder) {
		
			%>
				//create a new bean and class if necessary
				org.apache.commons.beanutils.DynaBean <%=objectName%> = null;
	
				if (hasNesting) {
				    //if there is nesting then the parent object may already exist
				    if (parentChildMap.containsKey("<%=objectName%>")) {
					    //ok this is a parent 
					    <%
					   //Might end up creating a few extra objects this way - but since everything is in a row as input we
					   //should still get the correct result
					   	if (parentChildMap.containsKey(objectName)) {
							ArrayList <String> childObjects = parentChildMap.get(objectName);
							for (String child : childObjects) {
					    %>

							    if (!  <%=objectName%><%=child%>Map.containsKey(<%=objectName%><%=child%>JoinKey)) {
								// we don't already have the object so create a new one the nesting of the child object in the parent will be done later
								// when we know that all the necessary objects have been creates
								<%=objectName%> = <%=objectName%>DynaClass.newInstance();
								//<%=objectName%>Collection = new java.util.LinkedHashSet();
								<%=child%>Collection = new java.util.LinkedHashSet();
								<%=objectName%>Collection.add(<%=objectName%>);
							    }
						    <%  
						    	}
						    }
						    %>
				    } else {
					    //ok this is a child and is never a parent so alway create an instance
					    <%=objectName%> = <%=objectName%>DynaClass.newInstance();
					    <%=objectName%>Collection.add(<%=objectName%>);
				    }
				} else {
				    if (! parentChildMap.containsKey("<%=objectName%>")) {
					    //ok this is a child and is never a parent so alway create an instance
					    <%=objectName%> = <%=objectName%>DynaClass.newInstance();
					    <%=objectName%>Collection.add(<%=objectName%>);
				    }
				}
				
			    <%
			   //Add the ojbects to the hashmaps
				if (parentChildMap.containsKey(objectName)) {
					ArrayList <String> childObjects = parentChildMap.get(objectName);
					for (String child : childObjects) {
			    %>
			    		if (<%=objectName%> != null) {
						<%=objectName%><%=child%>Map.put(<%=objectName%><%=child%>JoinKey, <%=objectName%>);
						<%=objectName%>.set("<%=child%>" , <%=child%>Collection);
					}
			    <%
			    		}
				}
			    %>
			    
			    
				
			<%		
			}

			//ok now add the fields to the objects
			int objectID=0;
			for (int i=0 ; i<objects.size() ; i++) {
				Map<String, String> object = objects.get(i);
				objectID = Integer.parseInt(object.get("OBJECT_ID"));
				String objectName = object.get("OBJECTNAME");
				%>
					if (<%=objectName%> != null) {
				<%
				for (int j=0 ; j < groups.size(); j++) {
					Map<String, String> fields = groups.get(j);
					int fieldObjectNo = Integer.parseInt(fields.get("OBJECT_GROUP"));
					String fieldName = fields.get("SCHEMA_COLUMN");
					if (fieldObjectNo == objectID) {
					%>
						<%=objectName%>.set("<%=fieldName%>" , <%=fieldName%>);
					<%
					}
				}
				%>
					}
				<%
			}
			
			//add the children to their parents
			
			for (Map.Entry entry : parentChildMap.entrySet()) {
				String parentName = (String) entry.getKey();
				ArrayList<String> children = (ArrayList<String>) entry.getValue();
				for (String child : children) {
					%>
						//get the parent object and add this child to the relevant Collection
						<%=parentName%> = <%=parentName%><%=child%>Map.get(<%=child%><%=parentName%>JoinKey);
						java.util.Collection <%=parentName%><%=child%>Collection = (java.util.Collection) <%=parentName%>.get("<%=child%>");
						<%=child%>Collection.add(<%=child%>);
					<%
				}
			}
			

		}
	}
   }
}

%>