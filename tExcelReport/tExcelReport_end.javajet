<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        java.util.List
        java.util.Map
	"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();



	List<Map<String, String>> objects =  (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__OBJECTNAMESTABLE__");

	%>
	  	java.util.HashMap <%=cid%>beans = new java.util.HashMap();
	<%

	for (int i=0 ; i<objects.size(); i++) {
		Map<String, String> object = objects.get(i);
		int objectID = Integer.parseInt(object.get("OBJECT_ID"));
		String objectName = object.get("OBJECTNAME");
		 %>
		 	//for now add the parents - TODO - amend to include toplevel parents
		 	if (parentChildMap.containsKey("<%=objectName%>")) {
				<%=cid%>beans.put("<%=objectName%>", <%=objectName%>Collection);
			} else {
				<%=cid%>beans.put("<%=objectName%>", <%=objectName%>Collection);
			}
		<%

	}

%>

        net.sf.jxls.transformer.XLSTransformer transformer = new net.sf.jxls.transformer.XLSTransformer();
        try {
		transformer.transformXLS(templateFileName, <%=cid%>beans, outputFilename);
	} catch (Exception e) {
		e.printStackTrace();
	}


	globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid %>);
